Recursion : 
	1. reduce the given input till a base condition 
	2. draw a recursive tree with given input n desired out..where input will decrease n output will increase ...and end will happen at the leaf node 
	where we get a proper output of disired ones.
	3. tree may be a choice diagram too 

// start 
//print all subset of a given string/ power set
public class A 
{
	public static void print(char [] arr, int st, int len, char [] res, int en)
	{
		if(len ==0)
		{
			for(int i =0; i<en; i++)
				System.out.print(res[i]);
			System.out.println();
			return ;
			
		}
		
		res[en]= arr[st];
		
		print(arr, st+1, len-1, res, en+1);
		print(arr, st+1, len-1, res, en);
	}

	public static void main(String [] args)
	{
		print(new char[] {'a', 'b', 'c'},0,  3, new char[3], 0 );
	}
}

//// end of program 

// satrt: same code with string (not char array)
public class A 
{
	public static void print(String s, int st, int len, String res)
	{
		if(len ==0)
		{
			
			System.out.println(res);
			return ;
			
		}
		
		String res1 = res+s.charAt(st);
		
		print(s, st+1, len-1, res1);
		String res2 = res;
		print(s, st+1, len-1, res2);
	}

	public static void main(String [] args)
	{
		print("abc",0,  3, "" );
	}
}

/// end of code 

// 10 to 1
public class A 
{

	public static void print(int num)
	{
		if(num==0)
			return;
		
		System.out.println(num);
		print(num-1);
	}

	public static void main(String [] args)
	{
		print(10);
	}
}
/////
///
//1 to 10 


public class A 
{
	public static void print(String s, int st, int len, String res)
	{
		if(len ==0)
		{
			
			System.out.println(res);
			return ;
			
		}
		
		String res1 = res+s.charAt(st);
		
		print(s, st+1, len-1, res1);
		String res2 = res;
		print(s, st+1, len-1, res2);
	}
	
	public static void print(int num)
	{
		if(num==0)
			return;
		print(num-1);
		System.out.println(num);
	}

	public static void main(String [] args)
	{
		print(10);
	}
}

//////////end 

// start 
// sort an array ..with recurssion ..(semi recursion )

public class A 
{
	public static int [] sort(int [] arr, int len)
	{
		if(len==1)
			return arr;
		int temp = arr[len-1];
		int [] arr1= sort(arr, len-1);
		
		int [] newarr= new int[len];
		int i =0, j=0;
		for(; j<len-1; )
		{
			if(arr1[i]<=temp)
			{
				newarr[i]= arr1[j];
				i++;
				j++;
			}
			else 
				break;
			
		}
		newarr[i]= temp;
		i++;
		while(j<len-1)
		{
			newarr[i] = arr1[j];
			i++;
			j++;
		}
		
		return newarr;
	}
	
	public static void main(String [] args)
	{
		System.out.println(Arrays.toString(sort(new int [] {6, 2, 8, 3, 5, 5, 2, 1, 9}, 9  )));
	}
}
/// end 


/// start 

// end 

