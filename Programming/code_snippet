Recursion : 
	1. reduce the given input till a base condition 
	2. draw a recursive tree with given input n desired out..where input will decrease n output will increase ...and end will happen at the leaf node 
	where we get a proper output of disired ones.
	3. tree may be a choice diagram too 

// start 
//print all subset of a given string/ power set
public class A 
{
	public static void print(char [] arr, int st, int len, char [] res, int en)
	{
		if(len ==0)
		{
			for(int i =0; i<en; i++)
				System.out.print(res[i]);
			System.out.println();
			return ;
			
		}
		
		res[en]= arr[st];
		
		print(arr, st+1, len-1, res, en+1);
		print(arr, st+1, len-1, res, en);
	}

	public static void main(String [] args)
	{
		print(new char[] {'a', 'b', 'c'},0,  3, new char[3], 0 );
	}
}

//// end of program 

// satrt: same code with string (not char array)
public class A 
{
	public static void print(String s, int st, int len, String res)
	{
		if(len ==0)
		{
			
			System.out.println(res);
			return ;
			
		}
		
		String res1 = res+s.charAt(st);
		
		print(s, st+1, len-1, res1);
		String res2 = res;
		print(s, st+1, len-1, res2);
	}

	public static void main(String [] args)
	{
		print("abc",0,  3, "" );
	}
}

/// end of code 

// 10 to 1
public class A 
{

	public static void print(int num)
	{
		if(num==0)
			return;
		
		System.out.println(num);
		print(num-1);
	}

	public static void main(String [] args)
	{
		print(10);
	}
}
/////
///
//1 to 10 


public class A 
{
	public static void print(String s, int st, int len, String res)
	{
		if(len ==0)
		{
			
			System.out.println(res);
			return ;
			
		}
		
		String res1 = res+s.charAt(st);
		
		print(s, st+1, len-1, res1);
		String res2 = res;
		print(s, st+1, len-1, res2);
	}
	
	public static void print(int num)
	{
		if(num==0)
			return;
		print(num-1);
		System.out.println(num);
	}

	public static void main(String [] args)
	{
		print(10);
	}
}

//////////end 

// start 
// sort an array ..with recurssion ..(semi recursion )

public class A 
{
	public static int [] sort(int [] arr, int len)
	{
		if(len==1)
			return arr;
		int temp = arr[len-1];
		int [] arr1= sort(arr, len-1);
		
		int [] newarr= new int[len];
		int i =0, j=0;
		for(; j<len-1; )
		{
			if(arr1[i]<=temp)
			{
				newarr[i]= arr1[j];
				i++;
				j++;
			}
			else 
				break;
			
		}
		newarr[i]= temp;
		i++;
		while(j<len-1)
		{
			newarr[i] = arr1[j];
			i++;
			j++;
		}
		
		return newarr;
	}
	
	public static void main(String [] args)
	{
		System.out.println(Arrays.toString(sort(new int [] {6, 2, 8, 3, 5, 5, 2, 1, 9}, 9  )));
	}
}
/// end 




//start 
// array sort ..through full recursion 
public class A 
{                                  
	public static void insert(int [] arr, int len,  int item)
	{
		if(len==0|| arr[len-1]<=item)
		{
			arr[len]= item;
			return ;
		}
		//int lenTemp= arr.length;
		int temp = arr[len-1];
		insert(arr, len-1, item);
		arr[len]= temp;
		return;
		
	}
	public static void sort(int [] arr, int len)
	{
		if(len==1)
			return ;
		int temp = arr[len-1];
		sort(arr, len-1);
		insert(arr, len-1,  temp);
	
	}
	
	public static void main(String [] args)
	{
		int [] arr = {-5, 0, 3, 7, -8, 1, 8, 4, -9};
		sort(arr, 9);
		System.out.println(Arrays.toString(arr));
		
	}
}

//end 

//// start 
// sort a stack (like previous array sorting ) 

public class A 
{             
	public static void insert(Stack<Integer> st, int item)
	{
		if(st.size()==0 || st.peek()<=item)
		{
			st.push(item);
			return ;
		}
		int top = st.pop();
		insert(st,  item);
		st.push(top);
		return ;
	}
	
	public static void sort(Stack<Integer>st )
	{
		if(st.size()<=1)
			return; 
		int temp = st.pop();
		sort(st);
		insert(st, temp);
		return;
	}
	public static void main(String [] args)
	{
		Stack<Integer> st = new Stack<>();
		st.push(-5); st.push(0); 
		st.push(3); st.push(7); st.push(-8); st.push(1);
		st.push(8); st.push(4); st.push(-9);
		System.out.println(st);
		sort(st);
		System.out.println(st);
	}
}
//// end 

// start
// reverse a stack (only small change in previous code  in condition if(st.size()==0 || st.peek()<=item)....remove second part of condition )
public class A 
{             
	public static void insert(Stack<Integer> st, int item)
	{
		if(st.size()==0 )
		{
			st.push(item);
			return ;
		}
		int top = st.pop();
		insert(st,  item);
		st.push(top);
		return ;
	}
	
	public static void rev(Stack<Integer>st )
	{
		if(st.size()<=1)
			return; 
		int temp = st.pop();
		rev(st);
		insert(st, temp);
		return;
	}
	public static void main(String [] args)
	{
		Stack<Integer> st = new Stack<>();
		st.push(-5); st.push(0); 
		st.push(3); st.push(7); st.push(-8); st.push(1);
		st.push(8); st.push(4); st.push(-9);
		System.out.println(st);
		rev(st);
		System.out.println(st);
	}
}
// end 

// start 
// dele middle element of stack 
public class A 
{             
	public static void del(Stack<Integer> st, int mid)
	{
		if(st.size()==mid)
		{
			st.pop();
			return; 
	
		}
		int temp = st.pop();
		del(st, mid);
		st.push(temp);
		return ;
	}
	public static void main(String [] args)
	{
		Stack<Integer> st = new Stack<>();
		st.push(-5); st.push(0); 
		st.push(3); st.push(7); st.push(-8); st.push(1);
		st.push(8); st.push(4); st.push(-9);st.push(18);
		int mid = (st.size()+1)/2;
		
		System.out.println(st);
		del(st, mid);
		System.out.println(st);
	}
}
///end 

// start 
// generate grammer n find digit at a particular position 
//https://www.youtube.com/watch?v=5P84A0YCo_Y&list=PL_z_8CaSLPWeT1ffjiImo0sYTcnLzo-wY&index=10
public class A 
{             
	public static int find(int n, int k)
	{
		
		if(n==1 && k ==1)
			return 0;
		int mid =( (int)Math.pow(2, n-1))/2;// 8 4...4 2... 2 1...
		if(k<=mid)
			return find(n-1, k);//1 
		else 
			return ~find(n-1, k-mid);// 2 3 
	}
	public static void main(String [] args)
	{
		int x = find(4, 8)==0?0:1; //01101001
		System.out.println(x);
	}
}

///end

// start 
// tower of hanoi problem 

public class  A 
{      
	public static void toh(int num, int s, int d, int h, int [] arr)
	{
		count++;
		arr[0]+=1;
		if(num==1)
		{
			System.out.println("moving plate"+ num+" from "+ s+" to "+ d);
			return ;
			
		}
		toh(num-1, s, h, d, arr);
		System.out.println("moving plate " + (num) +" from "+ s+" to "+ d);
		toh(num-1, h, d, s, arr);
	}
	
	static int count =0;
	public static void main(String [] args)
	{
		// here to print number of step we can use static variable count or ..single element array for reference passing 
		int [] arr = new int [1];
		arr[0]=0;
		toh(3, 1, 3, 2, arr);
		System.out.println("weldone "+ count+" !!" + arr[0] );
	}
}
///end 

// start 
// one more way to print all subset
public class  A 
{      
	public static void printAll(String in , String op)
	{
		if(in.length()==0)
		{
			System.out.println(op);
			return;
		}
		
		String op1 = op+in.charAt(0);
		String op2 = op;
		printAll(in.substring(1), op1);
		printAll(in.substring(1), op2);
		
	}
	public static void main(String [] args)
	{
		String in = "abc";
		String op = "";
		printAll(in, op );
	}
}

// end 

/ start 
// printing string permutatio upper lower case 
public class  A 
{      
	public static void printAll(String in , String op,  Set<String> st )
	{
		if(in.length()==0)
		{
			System.out.println(op);
			return;
		}
		
		String op1 = op+in.charAt(0);
		String op2 = op+String.valueOf(in.charAt(0)).toUpperCase();
		printAll(in.substring(1), op1, st);
		printAll(in.substring(1), op2, st);
		
	}
	public static void main(String [] args)
	{
		String in = "ab";
		String op = "";
		Set<String> st = new HashSet<>();
		printAll(in, op, st );
	}
}

// end 

// start 
// printing paranthesis in correct format all permutation 
public class  A 
{      
	public static void printAll(int op , int  cl,  String  res )
	{
		if(op==0 && cl ==0)
		{
			System.out.println(res);
			return ;
		}
		
		String ot1 ="";
		String ot2 ="";
	
		if(op>0)
		{
			ot1 = res+"(";
			// dont use > op = op-1; or printAll( --op , cl,  ot1 );... bcz it will change op's value for second if condition 
			printAll( op-1 , cl,  ot1 );
			//return;
		}
		
		 if (op<cl)
		 {
				ot2 = res+")";
				printAll( op , cl-1,  ot2 );
		}
		
			
		
	}
	
	public static void main(String [] args)
	{
		String res="";
		printAll(2, 2, res );
	}
}

///end 

// start 
// Print N-bit binary numbers having more 1’s than 0’s for any prefix
public class  A 
{      
	public static void printAll(int len , int  one, int zero,   String  res )
	{
		if(len==0)
		{
			System.out.println(res);
			return ;
		}

		String ot1 ="";
		ot1 = res+"1";
		printAll( len-1 , one+1, zero,   ot1 );

		if (one>zero)
		{
			String ot2 ="";
			ot2 = res+"0";
			printAll( len-1 , one, zero+1,   ot2 );
		}
	}

	public static void main(String [] args)
	{
		String res="";
		printAll(3, 0, 0,  res );
	}
}

// end 







