// start 
//  Nearest Greater to right | Next Largest Element
public class  A 
{  
	
	public static void nextGreatest(int [] arr)
	{
		Stack<Integer> st = new Stack<>();
		for(int i = arr.length-1; i>=0; i-- )
		{
			while(!st.isEmpty())
			{
				if(st.peek()>arr[i])
				{
					System.out.println(arr[i]+" - "+ st.peek());
					st.push(arr[i]);
					break;
				}
				else {
					
					st.pop();
					
				}
			}
			if(st.isEmpty())
			{
				System.out.println(arr[i]+" - "+ -1);
				st.push(arr[i]);
			}
		}
			
	}
	public static void main(String [] args)
	{
		int [] arr = {1, 3, 2, 4};
		int [] arr2 = {1, 3, 0, 0, 1, 2, 4};
		nextGreatest(arr);
		
	}
}

// end 

//start 
// Nearest Greater to left
public class  A 
{  
	
	public static void nextGreatestToLeft(int [] arr)
	{
		Stack<Integer> st = new Stack<>();
		for(int i = 0; i<arr.length; i++ )
		{
			while(!st.isEmpty())
			{
				if(st.peek()>arr[i])
				{
					System.out.println(arr[i]+" - "+ st.peek());
					st.push(arr[i]);
					break;
				}
				else {
					
					st.pop();
					
				}
			}
			if(st.isEmpty())
			{
				System.out.println(arr[i]+" - "+ -1);
				st.push(arr[i]);
			}
		}
			
	}
	public static void main(String [] args)
	{
		int [] arr = {1, 3, 2, 4};
		int [] arr2 = {1, 3, 0, 0, 1, 2, 4};
		nextGreatestToLeft(arr2);
		
	}
}
//end 
