// start 
// find the first most frequent character in string ...and only in one pass 
// if there were for two pass then one dimensional array was if ..bcz then it was choice to have one more pass on string to find first character which have more number of count 
//

public class Solve4 {
	
	public static void maxChar(String str)
	{
		str = str.trim().toLowerCase();
		int[][] arr= new int [26][2];
		for(int i =0; i <str.length(); i++)
		{
			if(arr[str.charAt(i)-'a'][0]==0)
			{
				arr[str.charAt(i)-'a'][0]=i+1;// to keep safety from 0 index based arr
				arr[str.charAt(i)-'a'][1]++;
			}
			else 
				arr[str.charAt(i)-'a'][1]++;
		}
		int max =0;
		int index=0;
		System.out.println(Arrays.deepToString(arr));
		for(int i =0; i<26; i++)
		{
			if(arr[i][1]>max)
			{
				
				max= arr[i][1];
				index= arr[i][0];
				
			}
			else if(arr[i][1]==max && arr[i][0]<index)
			{
				index = arr[i][0];
			}
		}
		System.out.println("max char: "+ str.charAt(index-1));
	}
	public static void main(String[] args) {
		
		String str = "keeesssttess";
		//char[] arr = str.toCharArray();
		
	//Arrays.sort(arr);
		//System.out.println(arr);
		maxChar(str);

	}

}


//end
// start 
// find number of empty cells in a matrix after each ooperation
// do some more testing

public class Solve4 {
	
	static long[] solve(int N, int K, int[][] cells){

        Set<Integer> rowSet = new HashSet<>();
        Set<Integer> colSet = new HashSet<>();

        int empty = N*N;
        int used =0;
        long [] res = new long [K];
        int row=0, col=0;


        for(int i =0 ; i<K; i++)
        {
            row = cells[i][0];
            col = cells [i][1];

            if(rowSet.contains(row) && colSet.contains(col))
            {
                // do nothing 
            }
            else if(!rowSet.contains(row) && !colSet.contains(col))
            {
                used = used +  (2*N-1)- rowSet.size()- colSet.size();
                rowSet.add(row);
                colSet.add(col);
            }
            else if (rowSet.contains(row) && !colSet.contains(col))
            {
                used = used+ N - rowSet.size();
                 colSet.add(col);

            }
            else if(! rowSet.contains(row) && colSet.contains(col))
            {
                used = used+ N - colSet.size();
                 rowSet.add(row);


            }
                

            //used = used - colSet.size();
            res[i]= empty- used;


        }
        return res;
       // Write your code here
    
    
    }
	public static void main(String[] args) {
		
		System.out.println(Arrays.toString(solve( 5, 4, new int[][] {{1,2}, {1, 3}, {1, 3}, {3, 3}})));

	}

}
// end 
