// start 
// find the max sum out of all possible arr[i]*i
public class Solve4 {

	// max sum i*arr[i]
	
	public static void maxSum(int [] arr)
	{
		int total=0;
		int i =0;
		int current =0;
		while(i <arr.length)
		{
			total = total+arr[i];
			
			current = current+arr[i]*i;
			i++;
		}
		
		
		int max = current;
		int times = 2;
		int last= arr.length-1;
		while(times <=arr.length)
		{
			current = current+(total-arr[last])-(arr.length-1)*arr[last];
			last--;
			times++;
			if(current> max)
				max = current;
		}
		System.out.println(max);
		
	}
	public static void main(String[] args) {
		int [] arr = new int[] {8, 3, 1, 2};
		maxSum(arr);
		
		
	
	}

}



// end 

// start 
// find sum in sorted n rotated 

public class Solve4 {

	public static int findPivot(int [] arr, int st, int en)
	{
		while(st<=en)
		{
			int mid = st + (en-st)/2;
			if(mid > 0 && arr[mid]<arr[mid-1])
				return mid;
			if(mid <arr.length-1 && arr[mid]>arr[mid+1])
				return mid+1;
			if(arr[mid]>arr[en])
				st = mid+1;
			else en = mid-1;
			
		}
		return -1;
	}
	public static boolean rotatedSum(int [] arr, int pivot, int key)
	{
		int st = pivot;
		int en = pivot -1;
		
		while(st!=en)
		{
			if(arr[st]+arr[en]== key)
			{
				return true;
			}
			if(arr[st]+arr[en]> key)
			{
				en = (en + arr.length -1 )%arr.length;
				
				
			}
			else 
			{
				st = (st + 1 )%arr.length;
			}
		}
		return false;
	}
	public static boolean simplsum(int [] arr, int key)
	{
		int st =0;
		int en = arr.length-1;
		while(st<en)
		{
			if(arr[st]+arr[en]==key)
				return true;
			if(arr[st]+arr[en]>key)
				en --;
			else st++;
				
			
		}
		return false;
		
	}
	public static void findSum(int [] arr, int key)
	{
		int pivotIndex = findPivot(arr, 0, arr.length-1);
		System.out.println("pivot: " + pivotIndex);
		boolean resIndex=false;
		if(pivotIndex==-1)
		{
			resIndex=  simplsum(arr, key);
		}
		else 
		{
			resIndex=  rotatedSum(arr, pivotIndex, key);
				
		}
		if(resIndex==false)
		{System.out.println("key not present");}
		else 
			System.out.println("key present at index "+ resIndex);
	}
	public static void main(String[] args) {
		int [] arr = new int[] {5 , 6, 7, 8, 9, 1, 2, 3, 4};
		findSum(arr, 3);
		
		
	
	}

}

// end 

// start 
// find key in sorted n rotated array 
public class Solve4 {

	public static int findPivot(int [] arr, int st, int en)
	{
		while(st<=en)
		{
			int mid = st + (en-st)/2;
			if(mid > 0 && arr[mid]<arr[mid-1])
				return mid;
			if(mid <arr.length-1 && arr[mid]>arr[mid+1])
				return mid+1;
			if(arr[mid]>arr[en])
				st = mid+1;
			else en = mid-1;
			
		}
		return -1;
	}
	
	public static int bs(int [] arr, int st, int en, int key) {
		
		while(st<=en)
		{
			int mid = st+(en-st)/2;
			if(arr[mid]== key)
				return mid;
			if(arr[mid]>key)
				en = mid-1;
			else st = mid+1;
		}
		return -1;
	}
	public static void sortedSearch(int [] arr, int key)
	{
		int pivotIndex = findPivot(arr, 0, arr.length-1);
		System.out.println("pivot: " + pivotIndex);
		int resIndex=-1;
		if(pivotIndex==-1)
		{
			resIndex=  bs(arr, 0, arr.length-1, key);
		}
		else 
		{
			if(key>=arr[pivotIndex] && key <= arr[arr.length-1])
				resIndex=  bs(arr, pivotIndex, arr.length-1, key);
			else if(key >= arr[0] && key <= arr[pivotIndex-1])
				resIndex=  bs(arr, 0, pivotIndex-1, key);
			else {
				
				System.out.println("key not present");
				return;
			}
				
				
		}
		if(resIndex==-1)
		{System.out.println("key not present");}
		else 
			System.out.println("key present at index "+ resIndex);
	}
	public static void main(String[] args) {
		int [] arr = new int[] {1, 2, 3,4 ,5 , 6, 7, 8, 9};
		sortedSearch(arr, 10);
		
		
	
	}

}

// end 

// start 
// rotateright
public class Solve4 {
	

	public static void rotateRight(int [] arr, int d)
	{
		int [] temp = new int [d];
		int last = arr.length-1;
		for(int i = d-1; i>=0;i--)
		{
			temp[i]= arr[last];
			last --;
		}
		int newlast= arr.length-1;
		while(last>=0)
		{
			arr[newlast] = arr[last];
			last --;
			newlast--;
		}
		for(int i = 0; i<d; i++)
		{
			arr[i]= temp[i];
		}
		
	}
	public static void main(String[] args) {
		int [] arr = new int[] {1, 2, 3, 4, 5, 6,7 ,8, 9};
		System.out.println(Arrays.toString(arr));
		rotateRight(arr, 4);
		System.out.println(Arrays.toString(arr));
		
		
	
	}

}
// end
