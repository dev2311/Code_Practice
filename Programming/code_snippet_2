// start 
// find one missing n one duplicate 
public class  A 
{    
	public static void solve(int [] arr)
	{
		int n = arr.length;
		int res=0;
		for(int i=1; i<=n;i++)
		{
			res = res ^i;
			res = res ^ arr[i-1];
		}
		// find first set bit 
		//int k =1;
		int pos=0;
		while((res & 1<<pos)==0)
		{
			pos++;
			//k = 1 <<pos;
		}
		//System.out.println(res);
		int num1= 0;
		int num2 =0;
		for(int i =1 ; i<=n; i++)
		{
			if((i & (1<<pos))==0)
				num1 = num1 ^ i;
			else num2 = num2 ^ i;
				
		}
		for(int i =0; i<n; i++)
		{
			if((arr[i] & 1<<pos)==0)
				num1 = num1^ arr[i];
			else 
				num2 = num2 ^ arr[i];
		}
		
		System.out.println(num1+"  "+ num2);
		
	}
	
	public static void method2(int [] arr )
	{
		int n = arr.length;
		int actualSum = 0 ;
		int givenSum= 0;
		for(int i =0; i<n; i++)
		{
			actualSum = actualSum+i+1;
			givenSum = givenSum+arr[i];
			
		}
		// missing m, duplicate d 
		int m=0, d=0;
		int sub = actualSum - givenSum; //m-d
		
		//System.out.println(sub);
		actualSum= 0;
		givenSum= 0;
		for(int i =0; i<n; i++)
		{
			actualSum = actualSum+ (int)Math.pow(i+1, 2);
			givenSum = givenSum+ (int)Math.pow(arr[i], 2);
			
		}
		int div= actualSum - givenSum;
		//System.out.println(div+" div");
		int sum = div/sub; // m+d
		//System.out.println(sum);
		int mm = (sub+sum)/2;
		int dd= sum-mm;
		System.out.println(mm+" "+dd);
	}
	public static void main(String [] args)
	{
		int [] arr = {1, 2, 4, 4, 7, 5, 6, 8};
		solve(arr);
		method2(arr);
		
	}
}

// end 

// start 
// finding multiple missing n duplicates in a range 
public class  A 
{    
	
	public static void method3(int [] arr)
	{
		for(int i = 0; i<arr.length; i++)
		{
			//int num = arr[arr[i]];
			while(arr[i]!=i+1)
			{
				
				if(arr[arr[i]-1]== arr[i])
					break;
				int temp = arr[arr[i]-1];
				arr[arr[i]-1]= arr[i];
				arr[i]= temp;
			}
		}
		System.out.println(Arrays.toString(arr));
		for(int i =0; i<arr.length; i++)
		{
			if(arr[i]!=i+1)
			{
				System.out.println("dup: "+ arr[i]);
				System.out.println("mis: "+ (i+1));
			}
		}
	}
	public static void main(String [] args)
	{
		int [] arr = {2, 3, 1, 8, 2, 3, 5, 1};
		method3(arr);
		
	}
}
// end 

// start 
// another way to find dup n missing ... "using index method"
public class  A 
{    
	
	public static void method3(int [] arr)
	{
		for(int i =0; i<arr.length; i++)
		{
			int temp = arr[Math.abs(arr[i])-1];
			if(temp<0)
			{
				System.out.println("dup: "+ -temp);
			}
			else {
				
				arr[Math.abs(arr[i])-1] = - temp;
			}
		}
		System.out.println(Arrays.toString(arr));
		
		for(int i =0 ; i< arr.length; i++)
		{
			if(arr[i]>0)
			{
				System.out.println("missing: " + (i+1));
			}
		}
	}
	public static void main(String [] args)
	{
		int [] arr = {2, 3, 1, 8, 2, 3, 5, 1};
		method3(arr);
		
	}
}
// end 
// start 
// rec binary search 
public class  A 
{    
	

	public static int bSearchUtil(int [] arr, int st, int en, int key)
	{
		if(st<=en)
		{
			int mid = st+(en-st)/2;
			if(arr[mid]==key)
				return mid;
			if(arr[mid]>key)
				return bSearchUtil(arr, st, mid-1, key);
			else return bSearchUtil(arr, mid+1, en, key);
		}
		else 
		return -1;
	}
	public static void bSearch(int [] arr, int key)
	{
		int pos = bSearchUtil(arr, 0, arr.length-1, key);
		System.out.println(pos);
	}
	public static void main(String [] args)
	{
		int [] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
		bSearch(arr, 10);
		
		
	}
}
// end 
//start 
// binary search in descending array 
public class  A 
{  
	public static int revBSearchUtil(int [] arr, int st, int en, int key)
	{
		if(st<=en)
		{
			int mid = st+(en-st)/2;
			if(arr[mid]==key)
				return mid;
			if(arr[mid]>key)
				return revBSearchUtil(arr, mid+1, en, key);
			else return revBSearchUtil(arr, st, mid-1, key);
		}
		else 
		return -1;
	}
	public static void revBSearch(int [] arr, int key)
	{
		int pos = revBSearchUtil(arr, 0, arr.length-1, key);
		System.out.println(pos);
	}
	public static void main(String [] args)
	{
		int [] arr = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
		revBSearch(arr, 0);
		
		
	}
}
//end 

//start 
//bs order agnostic 
public class  A 
{  
	public static int revBSearchUtil(int [] arr, int st, int en, int key, boolean flag)
	{
		if(st<=en)
		{
			int mid = st+(en-st)/2;
			if(arr[mid]==key)
				return mid;
			if(flag==false)
			{
				if(arr[mid]>key)
					return revBSearchUtil(arr, mid+1, en, key, flag);
				else return revBSearchUtil(arr, st, mid-1, key, flag);
			}
			else {
				
				if(arr[mid]>key)
					return revBSearchUtil(arr, st, mid-1, key, flag);
				else return revBSearchUtil(arr, mid+1, en, key, flag);
			}
			
		}
		else 
		return -1;
	}
	public static void revBSearch(int [] arr, int key)
	{
		boolean flag = false;
		if(arr[0]<arr[1])
			flag= true;
		int pos = revBSearchUtil(arr, 0, arr.length-1, key, flag);
		System.out.println(pos);
	}
	public static void main(String [] args)
	{
		int [] arr = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
		int [] arr2 = {1, 2, 3, 4, 5, 6, 7, 8, 9,10};
		revBSearch(arr2, 9 );
		
		
	}
}
//end 

// start 
// first n last occurence of a element 
public class  A 
{  
	public static int revBSearchUtil(int [] arr, int st, int en, int key)
	{
		if(st<=en)
		{
			int mid = st+(en-st)/2;
			if(arr[mid]==key)
				return mid;
			if(arr[mid]>key)
				return revBSearchUtil(arr, st, mid-1, key);
			else return revBSearchUtil(arr, mid+1, en, key);
		}else 
		return -1;
	}
	
	public static int revBSearchUtilFirst(int []arr, int st, int en, int key)
	{
		//int mid = st+en-st)/2
		if(st<=en)
		{
			int mid = st+(en-st)/2;
			if(arr[mid]== key && mid==0)
				return mid;
			if(arr[mid]==key && mid>0 && arr[mid-1]<key)
				return mid;
			if(arr[mid]<key)
				return revBSearchUtilFirst(arr, mid+1, en,  key);
		}
		return st;
	}
	public static int revBSearchUtilLast(int []arr, int st, int en, int key)
	{
		if(st<=en)
		{
			int mid = st+(en-st)/2;
			if(arr[mid]== key && mid==en)
				return mid;
			if(arr[mid]==key && mid<en && arr[mid+1]>key)
				return mid;
			if(arr[mid]>key)
				return revBSearchUtilFirst(arr, st, mid-1,  key);
		}
		return en;
	}
	public static void revBSearch(int [] arr, int key)
	{
		
		int pos = revBSearchUtil(arr, 0, arr.length-1, key);
		//System.out.println("pos: "+ pos);
		if(pos!=-1)
		{
			int first = revBSearchUtilFirst(arr, 0, pos, key);
			int last  = revBSearchUtilLast(arr, pos, arr.length-1, key);
			System.out.println("first:"+first+" - "+ "last:"+last );
			
		}
		//System.out.println(pos);
	}
	public static void main(String [] args)
	{
		//int [] arr = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
		int [] arr2 = {1, 2, 3, 4, 4, 4, 4, 8, 9,10};
		revBSearch(arr2, 4 );
		
		
	}
}
// end 

// start 
// finding rotation length in a array 

public class  A 
{  
	
	public static int findMinIndex(int [] arr, int st , int en)
	{
		if(st ==en )
			return st;
		if(st<en)
		{
			System.out.println(st+"  "+ en);
			int mid = st+(en-st)/2;
			if(mid>st && arr[mid]<arr[mid-1])
				return mid;
			if(mid<en && arr[mid]>arr[mid+1])
				return mid+1;
			
			
			
			if(mid>st && arr[st]>arr[mid])
				return findMinIndex(arr, st , mid-1);
			if(mid<en && arr[mid]>arr[en])
				return findMinIndex(arr, mid+1 ,en);
			
				
		}
		
		return -1;
	}
	public static int rotationSize(int []arr)
	{
		if(arr.length==1)
			return 0;
		if(arr[0]<arr[arr.length-1])
		{
			System.out.println("unrotated array ");
			return 0;
		}
		int index = findMinIndex(arr, 0, arr.length-1);
		
			System.out.println("index "+ index);
			return arr.length-1-index+1;
		
		
	}
	public static void main(String [] args)
	{
		int [] arr = {5, 6, 7, 8, 9, 10, 1, 2, 3, 4};
		
		System.out.println("rotation size: "+ rotationSize(arr));
		
		
	}
}
// end 



